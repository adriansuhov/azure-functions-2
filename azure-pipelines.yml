# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
- group: SecureVars
- name: isDevelop
  value: $[eq(variables['System.PullRequest.TargetBranch'], 'develop')]
- name: isMain
  value: $[eq(variables['System.PullRequest.TargetBranch'], 'main')]

pool:
  vmImage: windows-latest

resources:
  repositories:
  - repository: TestAutomation
    type: github
    endpoint: adriansuhov
    name: adriansuhov/azure-devops
    trigger:
      batch: true
      branches:
        include:
        - main

stages:
- stage: BuildAndTest
  displayName: "Build & Test"
  jobs:
  - job: TestEnv
    displayName: "Develop"
    condition: eq(variables.isDevelop, true)
    steps:
    # Set up dependencies
    # - task: UseDotNet@2
    #   inputs:
    #     version: '5.0.x'
    #     includePreviewVersions: true
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    # Build project
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'
    # Run Unit Tests
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/*.Test.csproj'

    # Publish build
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true
    - publish: $(Build.ArtifactStagingDirectory)/$(buildConfiguration)
      artifact: $(Build.DefinitionName)

  - job: ProdEnv
    displayName: "Master"
    condition: eq(variables.isMain, true)
    steps:
    # Set up dependencies
    - script: echo Hello Stage Build & Test!

- stage: Deploy
  condition: and(succeeded(), eq(variables.isDevelop, true))
  displayName: "Deploy Azure Function"
  jobs:
  - job: Deploy
    displayName: 'Deploy Azure Function'
    steps:
    - pwsh: |
        Write-Host $(System.PullRequest.TargetBranch) 
        Write-Host $(azureStorageName)
        Write-Host $(azureSub)
        Write-Host $(sourceLocation)
        Write-Host $(isDevelop)
        Write-Host $(isMain)
        Write-Host "--------------"
        dir env:
    # - task: AzureFunctionApp@1
    #   inputs:
    #     azureSubscription: 'AzFun_SC'
    #     appType: 'functionApp'
    #     appName: 'adsuho-f2'
    #     package: '$(Build.ArtifactStagingDirectory)/$(buildConfiguration)/DotNet.zip'
    #     deploymentMethod: 'auto'

- stage: FunctionalTests
  condition: and(succeeded(), eq(variables.isDevelop, true))
  displayName: 'Run Functional Test Automation'
  jobs:
  - job: FunctionalTests
    steps:
      - script: echo Hello Stage Functional Tests!