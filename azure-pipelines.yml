# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
- group: SecureVars
- name: isDevelop
  value: $[eq(variables['System.PullRequest.TargetBranch'], 'develop')]
- name: isMain
  value: $[eq(variables['System.PullRequest.TargetBranch'], 'main')]

pool:
  vmImage: windows-latest

resources:
  repositories:
  - repository: TestAutomation
    type: github
    endpoint: adriansuhov
    name: adriansuhov/azure-devops
    trigger:
      batch: true
      branches:
        include:
        - main

stages:
- stage: BuildAndTest
  displayName: "Build & Test"
  jobs:
  - job: Develop
    displayName: "Develop"
    condition: eq(variables.isDevelop, true)
    steps:
    # Set up dependencies
    # - task: UseDotNet@2
    #   inputs:
    #     version: '5.0.x'
    #     includePreviewVersions: true
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    # Build project
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'
    # Run Unit Tests
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/*.Test.csproj'
        arguments: '--collect "Code coverage"'

    # Publish build
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true
    - publish: $(Build.ArtifactStagingDirectory)/$(buildConfiguration)
      artifact: $(Build.DefinitionName)

  - job: ProdEnv
    displayName: "Master"
    condition: eq(variables.isMain, true)
    steps:
    # Set up dependencies
    - script: echo Hello Stage Build & Test!

# - stage: Deploy
#   condition: and(succeeded(), eq(variables.isDevelop, true))
#   displayName: "Deploy Azure Function"
#   jobs:
#   - job: Deploy
#     displayName: 'Test Environment'
#     steps:
#     # Downloading the build
#     - download: current
#       artifact: $(Build.DefinitionName)
#     # Deploying the function into Test Environment
#     - task: AzureFunctionApp@1
#       inputs:
#         azureSubscription: 'AzFun_SC'
#         appType: 'functionApp'
#         appName: 'adsuho-f2'
#         package: '$(Pipeline.Workspace)/$(Build.DefinitionName)/DotNet.zip'
#         deploymentMethod: 'auto'

# - stage: FunctionalTests
#   condition: and(succeeded(), eq(variables.isDevelop, true))
#   displayName: 'Run Functional Test Automation'
#   jobs:
#   - job: FunctionalTests
#     displayName: "Test Environment"
#     steps:
#       - checkout: TestAutomation
#       - task: Maven@3
#         inputs:
#           mavenPomFile: 'pom.xml'
#           goals: 'test'
#           publishJUnitResults: true
#           testResultsFiles: '**/surefire-reports/TEST-*.xml'
#           javaHomeOption: 'JDKVersion'
#           mavenVersionOption: 'Default'
#           mavenAuthenticateFeed: false
#           effectivePomSkip: false
#           sonarQubeRunAnalysis: false
#       - task: AzureFileCopy@3
#         inputs:
#           SourcePath: '$(sourceLocation)'
#           azureSubscription: '$(azureSub)'
#           Destination: 'AzureBlob'
#           storage: '$(azureStorageName)'
#           ContainerName: '$web'
#           BlobPrefix: '$(Build.BuildNumber)'

#       - pwsh: |
#           Write-Host "Storage account is $(azureStorageName)"
#           $reportLocation = "https://" + "$(azureStorageName)" `
#             + ".z6.web.core.windows.net/" + "$(Build.BuildNumber)" `
#             + "/index.html"
#           Write-Host "ReportLocation is $reportLocation"

#           curl "https://api.postmarkapp.com/email" `
#             -X POST `
#             -H "Accept: application/json" `
#             -H "Content-Type: application/json" `
#             -H "X-Postmark-Server-Token: $(PostmarkToken)" `
#             -d "{ `
#             'From': '$(PostmarkSender)', `
#             'To': '$(PostmarkReceiver)', `
#             'Subject': 'Convacloud Test Automation Results', `
#             'TextBody': 'Test Automation run', `
#             'HtmlBody': '<html><body>$(PostmarkBody)</body></html>',
#             'MessageStream': 'outbound' `
#             }"